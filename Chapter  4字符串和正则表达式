字符串和正则表达式



preview:
不同的编码标准不同，其存储不同的文字所用的内存大小不同，有时候需要不断转化。
Python3中所有的数字英文字母中文都按照一个符号来处理。

前文所提到的均为序列方法，计算长度，分片，元素访问等这写都是通用的办法


当编程中用到中文等是需要注释出来，不然编译器会认为出现错误*********************
#encoding=utf-8 *******************************************************

1字符串  ---不可变序列，对其做的增删改都是返回一个修改替换后的结果字符串，并不对原字符串做任何修改

1.1字符串格式化
字符串的表示   ‘’   “”   “‘’””    ....可以说很任性，单引号双引号三引号都可以
str人看的/repr机器看的多一个单引号

"woshishui%d"%c   %d是格式，c是数字
常见的格式：
%d ---10     %i----10  %o ----8   %x----16    %e----指数

1.2字符串的常见方法
find('abc',7,20)------7-20范围内查找 切片---首次出现
split('-') ------如果不指定分隔符，任何空白符号都被认为是分隔符
join()   ------ ‘’.join(a_list_)
lower(),upper(),capitalize()---首字母变为大写   ，title---每个单词的首字符都大写   ，swapcase()----大变小小变大
replace()   ---s.replace('xx','aa')一次只能换一个
table=string.maketrans('aaaaa','asdasd')---生成字符映射表 .....s.translate(table)-----进行转化
strip('')------删除左右两边的空白字符或者指定的连续字符----rstrip（）----右边的
eval()---把任意字符串转化为表达式求值
in 字符串包不包含
startswith('')---endswith('')-----指定开始或者结束
isalnum()数字或字符 isalpha 字母  isdigit 

有很多字符串常量 
string.letters/printable/lowercase/uppercase/punctuation





2.正则表达式
元字符：
.------匹配除换行符之外的任意字符
*------**位于*之前的0或多个
+***********+*****1*****
|位于之前或之后的
^匹配行首
￥匹配行尾
？匹配位于？之前的0或多个
\表示位于其之后的是转义字符
[]匹配其中的任意一个字符
[a-zA-Z0-9]   表示范围
（）当整体来看
（pattern）{4，8}
\d----数字
\S----任何空白字符
\w-----任何字母，数字和下划线


2.1re模块主要方法
compile(pattern[,flags])------模块
search(pattern,string)-------返回match对象或者None
match(pattern,string)--------返回match对象或者None
findall(pattern,string)-----模式中所有匹配项
split(pattern,string)------
sub(pat,repl,string[,count])------
escape(string)


flags= re.I /忽略大小写  re.L/re.M-----re.---匹配人意.可以匹配任何  ---re.X忽略模式中的空格



























